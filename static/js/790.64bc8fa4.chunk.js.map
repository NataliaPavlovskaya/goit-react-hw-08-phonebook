{"version":3,"file":"static/js/790.64bc8fa4.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Layout/Section.module.css?d613","components/Layout/Section.jsx","redux/contacts/contacts-selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","redux/contacts/contacts-operations.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","components/Filter/Filter.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactModal/ContactModal.module.css?1951","components/ContactModal/ContactModal.js","views/ContactsView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__cpp-W\",\"title\":\"Section_title__9535J\"};","import propTypes from 'prop-types';\nimport s from './Section.module.css';\n\nexport default function Section({ children, title }) {\n  return (\n    <section className={s.section}>\n      {title ? <h2 className={s.title}>{title}</h2> : null}\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: propTypes.string,\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.item;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    ),\n);\n\nexport const getIsAdded = createSelector([getContacts], contacts => {\n  const isAdded = name => contacts.map(contact => contact.name).includes(name);\n  return isAdded;\n});","// extracted by mini-css-extract-plugin\nexport default {\"TaskEditor\":\"ContactForm_TaskEditor__map6q\",\"TaskEditor_label\":\"ContactForm_TaskEditor_label__c1Ze8\",\"TaskEditor_input\":\"ContactForm_TaskEditor_input__8bhcL\",\"TaskEditor_button\":\"ContactForm_TaskEditor_button__4bMKM\"};","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styles from './ContactForm.module.css';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { getIsAdded } from '../../redux/contacts/contacts-selectors';\n\nexport default function ContactsForm() {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const isAdded = useSelector(getIsAdded);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (isAdded(name)) {\n      return alert(`${name} is already in contacts`);\n    } else {\n      dispatch(addContact(name, phone));\n    }\n\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <>\n      <form className={styles.form} onSubmit={e => handleSubmit(e)}>\n        <label id=\"name\" htmlFor=\"name\">\n          Name\n        </label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n        />\n        <label id=\"phone\" htmlFor=\"phone\">\n          Number\n        </label>\n        <input\n          className={styles.input}\n          type=\"tel\"\n          name=\"phone\"\n          id=\"phone\"\n          value={phone}\n          onChange={e => setPhone(e.target.value)}\n        />\n        <button type=\"submit\" disabled={!(name && phone)}>\n          add contact\n        </button>\n      </form>\n    </>\n  );\n}\n","import axios from 'axios';\nimport contactsActions from './contacts-actions';\nimport { infoNotify, warnNotify } from '../../services/tostify';\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(contactsActions.fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n\n    dispatch(contactsActions.fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(contactsActions.fetchContactsError(error.massage));\n    warnNotify(error.message);\n  }\n};\n\nexport const addContact = (name, number) => async dispatch => {\n  const contact = { name, number };\n  dispatch(contactsActions.addContactsRequest());\n  infoNotify('Запись добавлена');\n\n  try {\n    const { data } = await axios.post('/contacts', contact);\n\n    dispatch(contactsActions.addContactsSuccess(data));\n  } catch (error) {\n    dispatch(contactsActions.addContactsError(error.massage));\n    warnNotify(error.message);\n  }\n};\n\nexport const deleteContacts = id => async dispatch => {\n  dispatch(contactsActions.deleteContactsRequest());\n\n  try {\n    await axios.delete(`/contacts/${id}`);\n\n    dispatch(contactsActions.deleteContactsSuccess(id));\n  } catch (error) {\n    dispatch(contactsActions.deleteContactsError(error.massage));\n    warnNotify(error.message);\n  }\n};\n\nexport const editContacts = (id, update) => async dispatch => {\n  dispatch(contactsActions.editContactsRequest());\n\n  try {\n    const { data } = await axios.patch(`/contacts/${id}`, update);\n    console.log(data);\n    dispatch(contactsActions.editContactsSuccess(data));\n  } catch (error) {\n    dispatch(contactsActions.editContactsError(error.massage));\n    warnNotify(error.message);\n  }\n};","// extracted by mini-css-extract-plugin\nexport default {\"TaskList\":\"ContactList_TaskList__ASd5b\",\"TaskList_item\":\"ContactList_TaskList_item__pjGNc\",\"completed\":\"ContactList_completed__lxu0h\",\"TaskList_text\":\"ContactList_TaskList_text__YPKCU\",\"TaskList_actions\":\"ContactList_TaskList_actions__AyR6L\",\"TaskList_button\":\"ContactList_TaskList_button__friUZ\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContacts } from '../../redux/contacts/contacts-operations';\nimport { getFilteredContacts } from '../../redux/contacts/contacts-selectors';\nimport styles from './ContactList.module.css';\nimport propTypes from 'prop-types';\nimport s from '../ContactList/ContactList.module.css';\nimport { FaUserEdit, FaTrashAlt } from 'react-icons/fa';\n\nexport default function ContactsList({ onOpenModal }) {\n  const filterContacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <ul>\n        {filterContacts.map(({ id, name, number }) => (\n          <li className={styles.item} key={id}>\n            <p className={styles.nameText}>\n              {name}: <span>{number}</span>\n            </p>\n            <div>\n              <button\n                className={s.button}\n                type=\"button\"\n                onClick={() => onOpenModal({ name, number }, id)}\n              >\n                <FaUserEdit size=\"20\" />\n              </button>\n              <button\n                className={s.button}\n                type=\"button\"\n                onClick={() => dispatch(deleteContacts(id))}\n              >\n                <FaTrashAlt size=\"20\" className={styles.delete} />\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nContactsList.propTypes = {\n  onDeleteBtn: propTypes.func,\n  contacts: propTypes.arrayOf(\n    propTypes.exact({\n      id: propTypes.string,\n      name: propTypes.string,\n      number: propTypes.string,\n    }),\n  ),\n};","import { useSelector, useDispatch } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n\nexport default function Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <form className=\"form\">\n      <div className=\"inputWrapper\">\n        <label\n          className=\"label\"\n          name=\"filter\"\n          htmlFor=\"filter\"\n          value={filter}\n        ></label>\n        <input\n          style={{ marginBottom: '30px' }}\n          className=\"input\"\n          value={filter}\n          type=\"text\"\n          id=\"filter\"\n          placeholder=\"найти контакт по имени\"\n          onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\n        />\n      </div>\n    </form>\n  );\n}","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"ContactModal_overlay__DO7fi\",\"modal\":\"ContactModal_modal__SinjB\",\"controls\":\"ContactModal_controls__B-Ek7\",\"close\":\"ContactModal_close__eyPHt\",\"closeIcon\":\"ContactModal_closeIcon__FZeEg\"};","import { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { editContacts } from '../../redux/contacts/contacts-operations';\nimport s from './ContactModal.module.css';\nimport { FaRegWindowClose } from 'react-icons/fa';\n\nexport default function ContactModal({ contactData, onCloseModal }) {\n  const { contact, id } = contactData;\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const handlePressEsc = e => {\n      if (e.code === 'Escape') {\n        onCloseModal(false);\n      }\n    };\n\n    window.addEventListener('keydown', handlePressEsc);\n    return () => {\n      window.removeEventListener('keydown', handlePressEsc);\n    };\n  });\n\n  const handleBackDropClick = e => {\n    if (e.currentTarget === e.target) {\n      onCloseModal();\n    }\n  };\n\n  const handleSave = () => {\n    const updateContact = {\n      name: name ? name : contact.name,\n      number: number ? number : contact.number,\n    };\n    dispatch(editContacts(id, updateContact));\n    onCloseModal(false);\n  };\n\n  return (\n    <div className={s.overlay} onClick={e => handleBackDropClick(e)}>\n      <div className={s.modal}>\n        <button\n          className={s.close}\n          type=\"button\"\n          onClick={() => onCloseModal(false)}\n        >\n          <FaRegWindowClose size=\"30\" className={s.closeIcon} />\n        </button>\n        <form className={s.form}>\n          <div className=\"inputWrapper\">\n            <label htmlFor=\"editName\"></label>\n            <input\n              className=\"input\"\n              type=\"text\"\n              name=\"name\"\n              id=\"editName\"\n              value={name}\n              placeholder={contact.name}\n              onChange={({ target: { value } }) => setName(value)}\n            />\n          </div>\n          <div className=\"inputWrapper\">\n            <label htmlFor=\"editNumber\"></label>\n            <input\n              className=\"input\"\n              type=\"tel\"\n              name=\"number\"\n              id=\"editNamber\"\n              value={number}\n              placeholder={contact.number}\n              onChange={({ target: { value } }) => setNumber(value)}\n            />\n          </div>\n\n          <button className=\"button\" type=\"button\" onClick={handleSave}>\n            Сохранить\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}","import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from '../redux/contacts/contacts-operations';\nimport {\n  getContacts,\n  getIsLoading,\n} from '../redux/contacts/contacts-selectors';\nimport {Oval} from 'react-loader-spinner';\nimport Section from '../components/Layout/Section';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactsList from '../components/ContactList/ContactList';\nimport Filter from '../components/Filter/Filter';\nimport ContactModal from '../components/ContactModal/ContactModal';\n\nexport default function ContactsView() {\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const dispatch = useDispatch();\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [editContact, setEditContact] = useState({});\n\n  const handleOpenModal = (contact, id) => {\n    setIsOpenModal(true);\n    setEditContact({ contact, id });\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Section title=\"Введите имя и номер\">\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\n        {isLoading ? (\n          <Oval height={40}\n              width={40}\n              color=\"#4fa94d\"\n              wrapperStyle={{}}\n              wrapperClass=\"\"\n              visible={true}\n              ariaLabel='oval-loading'\n              secondaryColor=\"#4fa94d\"\n              strokeWidth={2}\n              strokeWidthSecondary={2} />\n      ) : null}\n      </div>\n\n      <ContactForm />\n\n      {contacts.length ? (\n        <Section title=\"Контакты\">\n          <Filter />\n          <ContactsList onOpenModal={handleOpenModal} />\n          {isOpenModal && (\n            <ContactModal\n              onCloseModal={setIsOpenModal}\n              contactData={editContact}\n            />\n          )}\n        </Section>\n      ) : null}\n    </Section>\n  );\n}"],"names":["Section","children","title","className","s","getContacts","state","contacts","item","getIsLoading","isLoading","getFilter","filter","getFilteredContacts","createSelector","contact","name","toLowerCase","includes","getIsAdded","map","ContactsForm","useState","setName","phone","setPhone","isAdded","useSelector","dispatch","useDispatch","handleSubmit","e","preventDefault","alert","number","contactsActions","infoNotify","axios","data","massage","warnNotify","message","addContact","styles","onSubmit","id","htmlFor","type","value","onChange","target","disabled","ContactsList","onOpenModal","filterContacts","onClick","size","deleteContacts","Filter","style","marginBottom","placeholder","ContactModal","contactData","onCloseModal","setNumber","useEffect","handlePressEsc","code","window","addEventListener","removeEventListener","currentTarget","handleBackDropClick","updateContact","update","console","log","editContacts","ContactsView","isOpenModal","setIsOpenModal","editContact","setEditContact","display","justifyContent","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","length"],"sourceRoot":""}