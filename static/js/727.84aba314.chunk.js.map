{"version":3,"file":"static/js/727.84aba314.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Layout/Section.module.css?d613","components/Layout/Section.jsx","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-operations.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","components/Filter/Filter.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactModal/ContactModal.module.css?1951","components/ContactModal/ContactModal.js","views/ContactsView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__cpp-W\",\"title\":\"Section_title__9535J\"};","import propTypes from 'prop-types';\nimport styles from './Section.module.css';\n\nexport default function Section({ children, title }) {\n  return (\n    <section className={styles.section}>\n      {title ? <h2 className={styles.title}>{title}</h2> : null}\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: propTypes.string,\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.item;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    ),\n);\n\nexport const getIsAdded = createSelector([getContacts], contacts => {\n  const isAdded = name => contacts.map(contact => contact.name).includes(name);\n  return isAdded;\n});","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { getIsAdded } from '../../redux/contacts/contacts-selectors';\n\nexport default function ContactsForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const isAdded = useSelector(getIsAdded);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (isAdded(name)) {\n      return alert(`${name} is already in contacts`);\n    } else {\n      dispatch(addContact(name, number));\n    }\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <form className=\"form\" onSubmit={e => handleSubmit(e)}>\n        <div className=\"inputWrapper\">\n          <input\n            className=\"input\"\n            type=\"text\"\n            name=\"name\"\n            id=\"name\"\n            value={name}\n            placeholder=\"ім'я\"\n            onChange={e => setName(e.target.value)}\n          />\n          <label\n            className={name ? 'labelRight' : 'label'}\n            htmlFor=\"name\"\n          ></label>\n        </div>\n        <div className=\"inputWrapper\">\n          <label\n            className={number ? 'labelRight' : 'label'}\n            htmlFor=\"phone\"\n          ></label>\n          <input\n            className=\"input\"\n            type=\"tel\"\n            name=\"number\"\n            id=\"number\"\n            value={number}\n            placeholder=\"Номер телефона\"\n            onChange={e => setNumber(e.target.value)}\n          />\n        </div>\n        <button className=\"button\" type=\"submit\" disabled={!(name && number)}>\n          Додати\n        </button>\n      </form>\n    </>\n  );\n}\n\nContactsForm.propTypes = {\n  onAddContacts: propTypes.func,\n};\n","import axios from 'axios';\nimport contactsActions from './contacts-actions';\nimport { infoNotify, warnNotify } from '../../services/tostify';\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(contactsActions.fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n\n    dispatch(contactsActions.fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(contactsActions.fetchContactsError(error.massage));\n    warnNotify(error.message);\n  }\n};\n\nexport const addContact = (name, number) => async dispatch => {\n  const contact = { name, number };\n  dispatch(contactsActions.addContactsRequest());\n  infoNotify('Запис додано');\n\n  try {\n    const { data } = await axios.post('/contacts', contact);\n\n    dispatch(contactsActions.addContactsSuccess(data));\n  } catch (error) {\n    dispatch(contactsActions.addContactsError(error.massage));\n    warnNotify(error.message);\n  }\n};\n\nexport const deleteContacts = id => async dispatch => {\n  dispatch(contactsActions.deleteContactsRequest());\n\n  try {\n    await axios.delete(`/contacts/${id}`);\n\n    dispatch(contactsActions.deleteContactsSuccess(id));\n  } catch (error) {\n    dispatch(contactsActions.deleteContactsError(error.massage));\n    warnNotify(error.message);\n  }\n};\n\nexport const editContacts = (id, update) => async dispatch => {\n  dispatch(contactsActions.editContactsRequest());\n\n  try {\n    const { data } = await axios.patch(`/contacts/${id}`, update);\n    console.log(data);\n    dispatch(contactsActions.editContactsSuccess(data));\n  } catch (error) {\n    dispatch(contactsActions.editContactsError(error.massage));\n    warnNotify(error.message);\n  }\n};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactList_item__EZYHO\",\"nameText\":\"ContactList_nameText__nu9fJ\",\"button\":\"ContactList_button__7kL4l\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContacts } from '../../redux/contacts/contacts-operations';\nimport { getFilteredContacts } from '../../redux/contacts/contacts-selectors';\nimport { FaUserEdit, FaTrashAlt } from 'react-icons/fa';\n\nimport styles from './ContactList.module.css';\nimport propTypes from 'prop-types';\n\n\nexport default function ContactsList({ onOpenModal }) {\n  const filterContacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <ul>\n        {filterContacts.map(({ id, name, number }) => (\n          <li className={styles.item} key={id}>\n            <p className={styles.nameText}>\n              {name}: <span>{number}</span>\n            </p>\n            <div>\n              <button\n                className={styles.button}\n                type=\"button\"\n                onClick={() => onOpenModal({ name, number }, id)}\n              >\n                <FaUserEdit size=\"20\" />\n              </button>\n              <button\n                className={styles.button}\n                type=\"button\"\n                onClick={() => dispatch(deleteContacts(id))}\n              >\n                <FaTrashAlt size=\"20\" className={styles.delete} />\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nContactsList.propTypes = {\n  onDeleteBtn: propTypes.func,\n  contacts: propTypes.arrayOf(\n    propTypes.exact({\n      id: propTypes.string,\n      name: propTypes.string,\n      number: propTypes.string,\n    }),\n  ),\n};","import { useSelector, useDispatch } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n\nexport default function Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <form className=\"form\">\n      <div className=\"inputWrapper\">\n        <label\n          className=\"label\"\n          name=\"filter\"\n          htmlFor=\"filter\"\n          value={filter}\n        ></label>\n        <input\n          style={{ marginBottom: '30px' }}\n          className=\"input\"\n          value={filter}\n          type=\"text\"\n          id=\"filter\"\n          placeholder=\"Знайти контакт за ім'ям\"\n          onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\n        />\n      </div>\n    </form>\n  );\n}","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"ContactModal_overlay__DO7fi\",\"modal\":\"ContactModal_modal__SinjB\",\"controls\":\"ContactModal_controls__B-Ek7\",\"close\":\"ContactModal_close__eyPHt\",\"closeIcon\":\"ContactModal_closeIcon__FZeEg\"};","import { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { editContacts } from '../../redux/contacts/contacts-operations';\nimport styles from './ContactModal.module.css';\nimport { FaRegWindowClose } from 'react-icons/fa';\n\nexport default function ContactModal({ contactData, onCloseModal }) {\n  const { contact, id } = contactData;\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const handlePressEsc = e => {\n      if (e.code === 'Escape') {\n        onCloseModal(false);\n      }\n    };\n\n    window.addEventListener('keydown', handlePressEsc);\n    return () => {\n      window.removeEventListener('keydown', handlePressEsc);\n    };\n  });\n\n  const handleBackDropClick = e => {\n    if (e.currentTarget === e.target) {\n      onCloseModal();\n    }\n  };\n\n  const handleSave = () => {\n    const updateContact = {\n      name: name ? name : contact.name,\n      number: number ? number : contact.number,\n    };\n    dispatch(editContacts(id, updateContact));\n    onCloseModal(false);\n  };\n\n  return (\n    <div className={styles.overlay} onClick={e => handleBackDropClick(e)}>\n      <div className={styles.modal}>\n        <button\n          className={styles.close}\n          type=\"button\"\n          onClick={() => onCloseModal(false)}\n        >\n          <FaRegWindowClose size=\"30\" className={styles.closeIcon} />\n        </button>\n        <form className={styles.form}>\n          <div className=\"inputWrapper\">\n            <label htmlFor=\"editName\"></label>\n            <input\n              className=\"input\"\n              type=\"text\"\n              name=\"name\"\n              id=\"editName\"\n              value={name}\n              placeholder={contact.name}\n              onChange={({ target: { value } }) => setName(value)}\n            />\n          </div>\n          <div className=\"inputWrapper\">\n            <label htmlFor=\"editNumber\"></label>\n            <input\n              className=\"input\"\n              type=\"tel\"\n              name=\"number\"\n              id=\"editNamber\"\n              value={number}\n              placeholder={contact.number}\n              onChange={({ target: { value } }) => setNumber(value)}\n            />\n          </div>\n\n          <button className=\"button\" type=\"button\" onClick={handleSave}>\n            Зберегти\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}","import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from '../redux/contacts/contacts-operations';\nimport {\n  getContacts,\n  getIsLoading,\n} from '../redux/contacts/contacts-selectors';\nimport {Oval} from 'react-loader-spinner';\nimport Section from '../components/Layout/Section';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactsList from '../components/ContactList/ContactList';\nimport Filter from '../components/Filter/Filter';\nimport ContactModal from '../components/ContactModal/ContactModal';\n\nexport default function ContactsView() {\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const dispatch = useDispatch();\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [editContact, setEditContact] = useState({});\n\n  const handleOpenModal = (contact, id) => {\n    setIsOpenModal(true);\n    setEditContact({ contact, id });\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Section title=\"Введіть ім'я та номер \">\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\n        {isLoading ? (\n          <Oval height={40}\n              width={40}\n              color=\"#4fa94d\"\n              wrapperStyle={{}}\n              wrapperClass=\"\"\n              visible={true}\n              ariaLabel='oval-loading'\n              secondaryColor=\"#4fa94d\"\n              strokeWidth={2}\n              strokeWidthSecondary={2} />\n      ) : null}\n      </div>\n\n      <ContactForm />\n\n      {contacts.length ? (\n        <Section title=\"Контакти\">\n          <Filter />\n          <ContactsList onOpenModal={handleOpenModal} />\n          {isOpenModal && (\n            <ContactModal\n              onCloseModal={setIsOpenModal}\n              contactData={editContact}\n            />\n          )}\n        </Section>\n      ) : null}\n    </Section>\n  );\n}"],"names":["Section","children","title","className","styles","getContacts","state","contacts","item","getIsLoading","isLoading","getFilter","filter","getFilteredContacts","createSelector","contact","name","toLowerCase","includes","getIsAdded","map","ContactsForm","useState","setName","number","setNumber","isAdded","useSelector","dispatch","useDispatch","handleSubmit","e","preventDefault","alert","contactsActions","infoNotify","axios","data","massage","warnNotify","message","addContact","onSubmit","type","id","value","placeholder","onChange","target","htmlFor","disabled","ContactsList","onOpenModal","filterContacts","onClick","size","deleteContacts","Filter","style","marginBottom","ContactModal","contactData","onCloseModal","useEffect","handlePressEsc","code","window","addEventListener","removeEventListener","currentTarget","handleBackDropClick","updateContact","update","console","log","editContacts","ContactsView","isOpenModal","setIsOpenModal","editContact","setEditContact","display","justifyContent","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","length"],"sourceRoot":""}